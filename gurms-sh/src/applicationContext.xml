<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd 
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"
	default-lazy-init="true">

	<!-- spring工具类,启动自动加载 -->
	<bean class="org.gurms.common.util.SpringUtil" lazy-init="false" />

	<!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入,可重复 -->
	<context:component-scan base-package="org.gurms">
		<!-- 排除某些package -->
		<!-- <context:exclude-filter type="regex" expression="org\.gurms\.orm\.dao\.hibernate\..*"/> -->
		<!-- 在主容器中（applicationContext.xml），将Controller的注解排除掉  -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 多数据源 配置，适用用jdbcTemplate,若适用hibernate，必须配置多个sessionFactory
	<bean id="dataSource" class="org.gurms.dao.datasource.DynamicDataSource">
	    <property name="targetDataSources">
	        <map key-type="java.lang.String">
	            <entry key="gurms" value-ref="gurmsDataSource"></entry>
	            <entry key="activiti" value-ref="activitiDataSource"></entry>
	        </map>
	    </property>
	    <property name="defaultTargetDataSource" ref="gurmsDataSource"/>
	</bean>
	-->

	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
	<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />-->
	
	<!-- 数据源配置,使用应用内的tomcat数据库连接池 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource" destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling -->
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${jdbc.pool.initialSize}" />
		<!-- 最大活动连接数量 -->
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<!-- 最大空闲连接数量  -->
		<property name="maxIdle" value="${jdbc.pool.maxIdle}" />
		<!-- 如果池里已没有连接，最大等待时间，超过报错 -->
		<property name="maxWait" value="10000" />
		<!-- 每15分钟扫描一次空闲连接  -->
		<property name="timeBetweenEvictionRunsMillis" value="900000" />
		<!-- 空间超过30分钟的连接超时回收  -->
		<property name="minEvictableIdleTimeMillis" value="1800000" />
		<property name="defaultAutoCommit" value="false" />
	</bean>

	<!-- Hibernate配置 -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.ehcache_config_file}</prop>
			</props>
		</property>
		<!-- hibernate 事件监听器-->
		<property name="eventListeners">
		    <map>
		         <entry key="post-commit-insert"><bean class="org.gurms.dao.hibernate.HibernateEventListener" /></entry>
		         <entry key="post-commit-update"><bean class="org.gurms.dao.hibernate.HibernateEventListener" /></entry>
		         <entry key="post-commit-delete"><bean class="org.gurms.dao.hibernate.HibernateEventListener" /></entry>
		    </map>
		</property>
		 
		<property name="packagesToScan">
			<list>
				<value>org.gurms.entity.*</value>
			</list>
		</property>
	</bean>

	<!-- spring 事务管理 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- 实现使用自定义的拦截器 -->
	<bean id="gurmsValidInterceptor" class="org.gurms.common.validate.GurmsValidInterceptor" />

	<bean class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*ServiceImpl</value>
			</list>
		</property>
		<!-- <property name="proxyTargetClass"><value>true</value></property> -->
		<property name="interceptorNames">
			<list>
				<value>gurmsValidInterceptor</value>
			</list>
		</property>
	</bean>

	<!-- production环境 ,多个配置文件用逗号分隔 -->
 	<beans profile="production">
		<context:property-placeholder ignore-resource-not-found="true"
			location="classpath*:/jdbc-pub.properties,
          			  classpath*:/jdbc-prod.properties" />	
	</beans>
	
	<!-- local development环境 -->
	<beans profile="development">
 		<context:property-placeholder ignore-unresolvable="true"
			location="classpath*:/jdbc-pub.properties,
          			  classpath*:/jdbc-dev.properties" />	
	</beans>
	
</beans>
